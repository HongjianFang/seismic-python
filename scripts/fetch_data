#!/usr/bin/env python
from argparse import ArgumentParser
from ConfigParser import RawConfigParser
import os
import shutil
import tempfile
from time import sleep
from obspy.core import read
from gazelle.datascope import closing, dbopen, Database
from seispy.util import MultiThreadProcess


def parse_args():
    parser = ArgumentParser()
    parser.add_argument("database", type=str, help="input database")
    parser.add_argument("cfg_file", type=str, help="configuration file")
    parser.add_argument("-s", "--subset", type=str, help="subset expression")
    parser.add_argument("-d", "--detection_mode",
                        action="store_true",
                        help="detection mode")
    return parser.parse_args()


def parse_config(args):
    cfg = {}
    config = RawConfigParser()
    config.read(args.cfg_file)
    cfg["rsync_server"] = config.get("General", "rsync_server")
    cfg["n_threads"] = config.getint("General", "n_threads")
    cfg["start_lead"] = config.getfloat("General", "start_lead")
    cfg["end_lag"] = config.getfloat("General", "end_lag")
    cfg["output_format"] = config.get("General", "output_format")
    cfg["stations"] = config.get("General", "stations").split(",")
    cfg["stations"] = [s.strip() for s in cfg["stations"]]
    cfg["channels"] = config.get("General", "channels").split(",")
    cfg["channels"] = [s.strip() for s in cfg["channels"]]
    return cfg

def inputter(args):
    if args.detection_mode:
        starttime, endtime = args.database.time_range("detection",
                                                      subset=args.subset)
    else:
        starttime, endtime = args.database.time_range("origin",
                                                      subset=args.subset)
    time = starttime
    time.hour, time.minute, time.second, time.microsecond = 0, 0, 0, 0
    root = os.getcwd()
    while time <= endtime:
        yield time
        time += 86400
        sleep(1)

def main_processor_detection_mode(time, args, cfg):
    db = args.database
    root = os.getcwd()
    stryear, strjulday = str(time.year), "%03d" % time.julday
    wdir = os.path.join(root, stryear)
    if not os.path.exists(wdir):
        os.mkdir(wdir)
    wdir = os.path.join(wdir, "continuous")
    if not os.path.exists(wdir):
        os.mkdir(wdir)
    wdir = os.path.join(wdir, strjulday)
    if not os.path.exists(wdir):
        os.mkdir(wdir)
    wdir = os.path.join(root, stryear,strjulday)
    if not os.path.exists(wdir):
        os.mkdir(wdir)
    detections = db.group_detections(subset=args.subset,
                                     starttime=time,
                                     endtime=time + 86400)
    for detection in detections:
        dirname = os.path.join(root,
                               stryear,
                               "continuous",
                               strjulday,
                               "%s-%s" % (detection.station.name,
                                          detection.channel.code))
        if not os.path.exists(dirname):
            os.mkdir(dirname)
        os.chdir(dirname)
        #print "Copying data for %s/%s %s:%s" % (stryear,
        #                                        strjulday,
        #                                        detection.station.name,
        #                                        detection.channel.code)
        cmd = "rsync -aP --whole-file %s/%s/%s/*%s.%s[ZNE12]%s* ./"\
            % (cfg["rsync_server"],
               stryear,
               strjulday,
               detection.station.name,
               detection.channel.code[:2],
               detection.channel.code[3:])
        #print cmd
        os.system(cmd)
        os.chdir(os.path.join(root, stryear, strjulday))
        for wf_file in sorted(os.listdir(os.path.join(root,
                                                      stryear,
                                                      "continuous",
                                                      strjulday,
                                                      dirname))):
            tr = read(os.path.join(root,
                                   stryear,
                                   "continuous",
                                   strjulday,
                                   dirname,
                                   wf_file))[0]
            starttime = detection.time - cfg["start_lead"]
            endtime = detection.time + cfg["end_lag"]
            file_length = int(float(endtime) - float(starttime))
            file_name = "%s.%s.%s.%s.%02d.%02d.%02d.%06d+%d"\
                % (tr.stats.station,
                   tr.stats.channel,
                   stryear,
                   strjulday,
                   starttime.hour,
                   starttime.minute,
                   starttime.second,
                   starttime.microsecond,
                   file_length)
            print "Writing file %s" % file_name
            tr.trim(starttime=starttime,
                    endtime=endtime)
            tr.write(file_name, format=cfg["output_format"])
    if os.path.exists(os.path.join(root, stryear, "continuous", strjulday)):
        shutil.rmtree(os.path.join(root, stryear, "continuous", strjulday))
    return None

def build_wffiles(wffiles, time, cfg):
    with closing(dbopen("/home/seismech-00/sjfzdb/anf/wfdiscs/%d" % time.year)) as wfdb:
        try:
            wffiles = open(wffiles, "w")
            tbl_wfdisc = wfdb.lookup(table="wfdisc")
            subset = "time >= _%d%03d_ && time < _%d%03d_"\
                    % (time.year, time.julday, time.year, (time.julday + 1))
            subset += "&& sta =~ /%s" % cfg["stations"][0]
            for sta in cfg["stations"][1:]:
                subset += "|%s" % sta
            subset += "/ && chan =~ /%s" % cfg["channels"][0]
            for chan in cfg["channels"]:
                subset += "|%s" % chan
            subset += "/"
            view = tbl_wfdisc.subset(subset)
            _tmp = view.sort(("sta", "chan", "time")); view.free(); view = _tmp
            for record in view.iter_record():
                ddir, dfile = record.getv("dir", "dfile")
                dfile = os.path.join(ddir, dfile)
                wffiles.write("%s\n" % dfile)
        finally:
            view.free()
            wffiles.close()

def main_processor(time, cfg, args):
    db = args.database
    year, jday = str(time.year), "%03d" % time.julday
    root = os.getcwd()
    tmp_root = tempfile.mkdtemp()
    try:
        wffiles = os.path.join(tmp_root, "wffiles_%s.txt" % year)
        build_wffiles(wffiles, time, cfg)
        ddir = os.path.join(tmp_root, year, jday)
        subset = "time >= _%s%s_ && time < _%s%03d_"\
                % (year, jday, year, (time.julday + 1))
        if args.subset:
            subset += " && " + args.subset
        copy_flag = True
        for origin in db.iterate_events(subset=subset,
                                        parse_arrivals=False,
                                        parse_magnitudes=False):
            if copy_flag:
                copy_flag = False
                print "Copying data for %s/%s" % (year, jday)
                cmd = "rsync -aRP --whole-file %s -F --files-from=%s %s" % (cfg["rsync_server"], wffiles, tmp_root)
                os.system(cmd)
                print "Data retrieved for %s/%s" % (year, jday)
            print origin
            odir = os.path.join(root, year, "%06d" % origin.evid)
            if not os.path.isdir(odir):
                os.makedirs(odir)
            for wf_file in sorted(os.listdir(ddir)):
                tr = read(os.path.join(ddir, wf_file))[0]
                print "Writing file %s.%s.%06d" % (tr.stats.station, tr.stats.channel, origin.evid)
                tr.trim(starttime=origin.time - cfg["start_lead"], endtime=origin.time + cfg["end_lag"])
                fname = os.path.join(odir, "%s.%s.%06d" % (tr.stats.station,
                                                           tr.stats.channel,
                                                           origin.evid))
                yield (tr, fname)
    finally:
        shutil.rmtree(tmp_root)

def outputter(obj, cfg):
    tr, fname = obj
    tr.write(fname, format=cfg["output_format"])

def main():
    args = parse_args()
    cfg = parse_config(args)
    args.database = Database(os.path.abspath(args.database))
    extra_args = {"input_init_args": (args,),
                  "main_init_args": (cfg, args),
                  "output_init_args": (cfg,)}
    config_params = {"n_threads": cfg["n_threads"],
                     "input_q_max_size": cfg["n_threads"]}
    if args.detection_mode:
        main_proc = main_processor_detection_mode
    else:
        main_proc = main_processor
    mtp = MultiThreadProcess(inputter,
                            main_proc,
                            outputter,
                            extra_args=extra_args,
                            config_params=config_params)
    mtp.start()
    args.database.close()

if __name__ == "__main__":
    main()
