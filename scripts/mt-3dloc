#! /usr/bin/env python
import seispy as sp
import gazelle.datascope as ds
import argparse
import ConfigParser
import logging
import os

logger = sp.log.initialize_logging(__name__)

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("db", type=str, help="database")
    parser.add_argument("config", type=str, help="configuration file")
    parser.add_argument("-d", "--display_plots",
                        action="store_true",
                        default=False,
                        help="display plots")
    parser.add_argument("-p", "--plot",
                        nargs="?",
                        const=None,
                        default=False,
                        help="plot non-convergent events",
                        metavar="output_directory")
    parser.add_argument("-P", "--plot_all",
                        nargs="?",
                        const=None,
                        default=False,
                        help="plot all events",
                        metavar="output_directory")
    parser.add_argument("-s", "--subset", type=str)
    parser.add_argument("-v", "--verbose", action='store_true', help='verbose')
    args = parser.parse_args()
    if args.plot is not False or args.plot_all is not False:
        if not args.plot and not args.plot_all and not args.display_plots:
            logger.warning("no destination for plots")
            args.plot, args.plot_all = False, False
    args.db = os.path.abspath(args.db)
    args.config = os.path.abspath(args.config)
    if args.plot:
        args.plot = os.path.abspath(args.plot)
    if args.plot_all:
        args.plot_all = os.path.abspath(args.plot_all)
    return args


def parse_config(args):
    cfg = {}
    config = ConfigParser.RawConfigParser()
    config.read(args.config)
    cfg["tt_dir"] = config.get("General", "tt_dir")
    cfg["mode"] = config.get("General", "mode")
    cfg["author"] = config.get("General", "author")
    cfg["n_threads"] = config.getint("General", "n_threads")
    cfg["min_nsta"] = config.getint("General", "min_nsta")
    cfg["min_nobs"] = config.getint("General", "min_nobs")
    cfg["P_residual_tolerance"] = config.getfloat("General",
                                                  "P_residual_tolerance")
    cfg["S_residual_tolerance"] = config.getfloat("General",
                                                  "S_residual_tolerance")
    cfg["convergance_threshold"] = config.getfloat("General",
                                                   "convergance_threshold")
    cfg["max_iterations"] = config.getint("General", "max_iterations")
    cfg["input_q_size"] = config.getint("General", "input_q_size")
    cfg["output_q_size"] = config.getint("General", "output_q_size")
    return cfg


def getter(args):
    for origin in args.db.iterate_events(subset=args.subset,
                                         parse_magnitudes=False):
        yield origin

def main_processor(origin, locator, cfg):
    if cfg['mode'] == 'relocate':
        yield locator.relocate(origin)
    elif cfg['mode'] == 'locate':
        result = locator.locate(origin)
        if result is None:
            yield (False, origin)
        else:
            yield (True, result)
    else:
        logger.error("invalid mode: %s" % cfg['mode'])
        exit(1)


def outputter(result, ttgrid, args, cfg):
    prefilter = (("bandpass",), {"freqmin": 3.0, "freqmax": 10.0})
    origin = result[1]
    # first, deal with convergent solutions
    if result[0]:
        logger.info(origin)
        auth = cfg['author']
        origin.author = auth
        args.db.write_origin(origin)
        # plot origin
        if args.plot_all is not False:
            # don't save plots if output directory not provided
            if args.plot_all is None:
                save = False
            else:
                # create output directory if it doesn't exist
                if not os.path.isdir(args.plot_all):
                    os.mkdir(args.plot_all)
                # build file path name
                save = os.path.join(args.plot_all, str(origin.evid))
            # finally, plot
            origin.plot(filter=prefilter,
                        save=save,
                        show=args.display_plots,
                        ttgrid=ttgrid)
        return
    # now deal with plotting non-convergent solutions
    if args.plot is not False:
        # don't save plots if output directory not provided
        if args.plot is None and\
                (args.plot_all is None or args.plot_all is False):
            save = False
        # save plots to non-convergent solution output directory
        elif args.plot is not None:
            # create output directory if it doesn't exist
            if not os.path.isdir(args.plot):
                os.mkdir(args.plot)
            # build file path name
            save = os.path.join(args.plot, str(origin.evid))
        # save plots to all solution output directory if needed
        elif args.plot_all is not False and args.plot_all is not None:
            # create output directory if it doesn't exist
            if not os.path.isdir(args.plot_all):
                os.mkdir(args.plot_all)
            # build file path name
            save = os.path.join(args.plot_all, str(origin.evid))
        # finally, plot
        origin.plot(filter=prefilter,
                    save=save,
                    show=args.display_plots,
                    ttgrid=ttgrid)
    elif args.plot_all is not False:
        # save plots if output directory provided
        if args.plot_all is not None:
            # create output directory if it doesn't exist
            if not os.path.isdir(args.plot_all):
                os.mkdir(args.plot_all)
            # build file path name
            save = os.path.join(args.plot_all, str(origin.evid))
        else:
            save = False
        # finally, plot
        origin.plot(filter=prefilter,
                    save=save,
                    show=args.display_plots,
                    ttgrid=ttgrid)


def main():
    args = parse_args()
    cfg = parse_config(args)
    if args.verbose:
        sp.log.set_level(__name__, logging.DEBUG)
        sp.log.set_level("seispy", logging.DEBUG)
    args.db = ds.Database(args.db, mode='r+')
    config_params = {'n_threads': cfg['n_threads'],
                     'input_q_max_size': cfg['input_q_size'],
                     'output_q_max_size': cfg['output_q_size']}
    ttgrid = sp.ttgrid.TTGrid(cfg["tt_dir"])
    locator = sp.locate.Locator(ttgrid, cfg)
    extra_args = {'input_init_args': (args,),
                  'main_init_args': (locator, cfg),
                  'output_init_args': (ttgrid, args, cfg)}
    mtp = sp.util.MultiThreadProcess(getter,
                                     main_processor,
                                     outputter,
                                     extra_args=extra_args,
                                     config_params=config_params)
    mtp.start()
    args.db.close()

if __name__ == "__main__":
    try:
        logger.info("START - mt-3dloc")
        main()
    except BaseException as err:
        logger.error("failed with %s - %s" % (type(err), err))
        exit(1)
    logger.info("END - mt-3dloc")
    exit(0)
