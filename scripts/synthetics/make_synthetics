#!/usr/bin/env python

from ConfigParser import RawConfigParser
import os.path
import shutil
import struct
import subprocess
import sys
import numpy as np
from seispy.core import Origin, Station
from seispy.geometry import EARTH_RADIUS
from seispy.velocity import VelocityModel

def parse_config(config_file):
    cfg, propgrid = {}, {}
    cfg_file = RawConfigParser()
    cfg_file.read(config_file)
    propgrid['h0'] = cfg_file.getfloat('General', 'h0')
    propgrid['lon0'] = cfg_file.getfloat('General', 'lon0')
    propgrid['lat0'] = cfg_file.getfloat('General', 'lat0')
    propgrid['dr'] = cfg_file.getfloat('General', 'dr')
    propgrid['dlon'] = cfg_file.getfloat('General', 'dlon')
    propgrid['dlat'] = cfg_file.getfloat('General', 'dlat')
    propgrid['nr'] = cfg_file.getint('General', 'nr')
    propgrid['nlon'] = cfg_file.getint('General', 'nlon')
    propgrid['nlat'] = cfg_file.getint('General', 'nlat')
    cfg['propgrid'] = propgrid
    cfg['velocity_model'] = cfg_file.get('General', 'velocity_model')
    cfg['topography'] = cfg_file.get('General', 'topography')
    cfg['stations'] = cfg_file.get('General', 'stations')
    cfg['sources'] = cfg_file.get('General', 'sources')
    cfg['n_sources'] = cfg_file.getint('General', 'n_sources')
    return cfg

def generate_sources(n_sources, cfg):
    grid = cfg['propgrid']
    lon0, lat0, h0 = grid['lon0'] % 360., grid['lat0'], grid['h0']
    nlon, nlat, nr = grid['nlon'], grid['nlat'], grid['nr']
    dlon, dlat, dr = grid['dlon'], grid['dlat'], grid['dr']
    lon_max = lon0 + (nlon - 1) * dlon
    lat_max = lat0 + (nlat - 1) * dlat
    r_max = EARTH_RADIUS + h0
    r0 = r_max - (nr - 1) * dr
    delta_lon = lon_max - lon0
    delta_lat = lat_max - lat0
    delta_r = r_max - r0
    lon = np.random.rand(n_sources) * delta_lon + lon0
    lat = np.random.rand(n_sources) * delta_lat + lat0
    z = EARTH_RADIUS - (np.random.rand(n_sources) * delta_r + r0)
    sources = []
    outfile = open("sources.dat", "w")
    for i in range(n_sources):
        sources += [Origin(lat[i], lon[i], z[i], 597628800., orid=i, evid=i)]
        outfile.write("%.4f %.4f %.4f %.3f\n" % (lat[i], lon[i], z[i], 597628800.))
    outfile.close()
    return sources

def read_sources(infile):
    sources = []
    infile = open(infile)
    for line in infile:
        lat0, lon0, z0, t0 = [float(v) for v in line.split()]
        sources += [Origin(lat0, lon0, z0, t0)]
    infile.close()
    return sources

def write_frechet():
    ofile = open('frechet.in', 'w')
    ofile.write("0")
    ofile.close()

def write_gridsave():
    ofile = open('gridsave.in', 'w')
    ofile.write("1 1\n")
    ofile.write("1\n")
    ofile.write("1\n")
    ofile.close()

def write_mode_set():
    ofile = open('mode_set.in', 'w')
    ofile.write("F file_mode\n")
    ofile.write("T no_pp_mode\n")
    ofile.write("F parallel_mode\n")
    ofile.write("F display_mode\n")
    ofile.write("T save_rays_mode\n")
    ofile.write("F save_timefields_mode\n")
    ofile.close()

def write_source(lon, lat, depth):
    ofile = open('sources.in', 'w')
    ofile.write("1\n")
    ofile.write("0\n")
    ofile.write("%.4f %.4f %.4f\n" % (depth, lat, lon % 360.))
    ofile.write("1\n")
    ofile.write("1\n")
    ofile.write("0 2\n")
    ofile.write("1\n")
    ofile.close()

def write_receiver(stations):
    ofile = open('receivers.in', 'w')
    ofile.write("%d\n" % len(stations))
    for station in stations:
        rxlat0, rxlon0, elev = station.lat, station.lon, station.elev
        ofile.write("%.4f %.4f %.4f\n" % (-elev, rxlat0, rxlon0 % 360.))
        ofile.write("1\n")
        ofile.write("1\n")
        ofile.write("1\n")
    ofile.close()

def main(cfg, sources):
    print "loading velocity model"
    vm = VelocityModel(cfg['velocity_model'],
                       cfg['topography'])
    print "writing vgrids.in, interfaces.in and propgrid.in"
    vm.write_fm3d(cfg['propgrid'])
    propgrid = cfg['propgrid']
    write_frechet()
    write_gridsave()
    write_mode_set()
    stations = []
    ifile = open(cfg['stations'])
    for line in ifile:
        name, lon, lat, elev = line.split()
        lon, lat, elev = float(lon), float(lat), float(elev)
        stations += [Station(name, lon, lat, elev)]
    ifile.close()
    write_receiver(stations)
    for source in sources: 
        write_source(source.lon, source.lat, source.depth)
        for phase in ('P', 'S'):
            shutil.copyfile("vgrids.in_%s" % phase, "vgrids.in")
            subprocess.call("/home/shake/malcolcw/.local/bin/fm3d")
            #asc2bin(station.name, phase)
            shutil.move("arrivals.dat", "arrivals/%s%d.dat" % (phase, source.evid))
            shutil.move("rays.dat", "rays/%s%d.dat" % (phase, source.evid))

    
if __name__ == "__main__":
    cfg = parse_config(os.path.abspath(sys.argv[1]))
    sources = generate_sources(cfg['n_sources'], cfg)
    #sources = read_sources(cfg['sources'])
    main(cfg, sources)
